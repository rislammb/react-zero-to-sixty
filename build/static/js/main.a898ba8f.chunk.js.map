{"version":3,"sources":["components/Navbar.js","pages/about.js","components/PostForm.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","id","About","props","state","pageTitle","this","setState","Component","PostForm","addPost","editingPost","useState","loading","setLoading","title","body","post","setPost","errors","setErrors","onChange","event","target","name","value","useEffect","onSubmit","preventDefault","tempErrors","trim","Object","keys","length","validateForm","axios","put","then","res","data","catch","err","console","error","htmlFor","type","class","Home","posts","setPosts","limit","setLimit","setEditingPost","editPost","deletePost","delete","postsUpdated","filter","p","get","find","index","findIndex","splice","onClick","map","key","createdAt","href","bind","defaults","baseURL","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a898ba8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <div className='nav-wrapper'>\r\n        <div className='container'>\r\n          <Link to='/' className='brand-logo'>\r\n            React Starter\r\n          </Link>\r\n          <ul id='nav-mobile' className='right hide-on-med-and-down'>\r\n            <li>\r\n              <Link to='/'>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/about'>About</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass About extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pageTitle: 'The about page'\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      pageTitle: 'About page'\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>{this.state.pageTitle}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { useEffect, useState, Fragment } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PostForm = ({ addPost, editingPost }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [post, setPost] = useState({ title: '', body: '' });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const onChange = event => {\r\n    setPost({ ...post, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const tempErrors = {};\r\n    if (post.title.trim() === '') {\r\n      tempErrors.title = 'Title must not be empty';\r\n    }\r\n    if (post.body.trim() === '') {\r\n      tempErrors.body = 'Body must not be empty';\r\n    }\r\n\r\n    if (Object.keys(tempErrors).length > 0) {\r\n      setErrors(tempErrors);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n\r\n    if (!validateForm()) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    setErrors({});\r\n\r\n    if (post.id) {\r\n      axios\r\n        .put(`/post/${post.id}`, post)\r\n        .then(res => {\r\n          addPost(res.data);\r\n          setPost({ title: '', body: '' });\r\n          setLoading(false);\r\n        })\r\n        .catch(err => console.error(err));\r\n    } else {\r\n      axios\r\n        .post('/post', post)\r\n        .then(res => {\r\n          addPost(res.data);\r\n          setPost({ title: '', body: '' });\r\n          setLoading(false);\r\n        })\r\n        .catch(err => console.error(err));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPost(editingPost);\r\n  }, [editingPost]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {!loading ? (\r\n        <form className='push-in' onSubmit={onSubmit}>\r\n          <div className='input-field'>\r\n            <label htmlFor='title'>Title</label>\r\n            <input\r\n              type='text'\r\n              name='title'\r\n              value={post.title}\r\n              onChange={onChange}\r\n              className={errors.title && 'invalid'}\r\n            />\r\n            <span class='helper-text'>{errors.title}</span>\r\n          </div>\r\n          <div className='input-field'>\r\n            <label htmlFor='body'>Body</label>\r\n            <input\r\n              type='text'\r\n              name='body'\r\n              value={post.body}\r\n              onChange={onChange}\r\n              className={errors.body && 'invalid'}\r\n            />\r\n            <span class='helper-text'>{errors.body}</span>\r\n          </div>\r\n          <button type='submit' className='waves-effect waves-light btn'>\r\n            {post.id ? 'Update' : 'Add'}\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <div className='progress'>\r\n          <div className='indeterminate'></div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport PostForm from '../components/PostForm';\r\n\r\nconst Home = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [limit, setLimit] = useState(5);\r\n  const [editingPost, setEditingPost] = useState({\r\n    title: '',\r\n    body: '',\r\n    id: null\r\n  });\r\n\r\n  const editPost = post => {\r\n    setEditingPost(post);\r\n  };\r\n\r\n  const deletePost = id => {\r\n    axios.delete(`/post/${id}`).then(() => {\r\n      const postsUpdated = posts.filter(p => p.id !== id);\r\n      setPosts(postsUpdated);\r\n    });\r\n  };\r\n\r\n  const addPost = post => {\r\n    if (posts.find(p => p.id === post.id)) {\r\n      const index = posts.findIndex(p => p.id === post.id);\r\n      const postsUpdated = [...posts];\r\n      postsUpdated.splice(index, 1, post);\r\n      setPosts(postsUpdated);\r\n    } else {\r\n      const postsUpdated = [post, ...posts];\r\n      setPosts(postsUpdated);\r\n    }\r\n  };\r\n\r\n  const getNumberOfPosts = () => {\r\n    axios\r\n      .get(`/posts/${limit}`)\r\n      .then(res => setPosts(res.data))\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get('/posts')\r\n      .then(res => {\r\n        setPosts(res.data);\r\n      })\r\n      .catch(err => console.error(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className='row'>\r\n        <div className='col s8'>\r\n          <PostForm addPost={addPost} editingPost={editingPost} />\r\n        </div>\r\n        <div class='col s3 push-in'>\r\n          <p>Limit number of posts</p>\r\n          <input\r\n            type='number'\r\n            value={limit}\r\n            onChange={event => setLimit(event.target.value)}\r\n          />\r\n          <button\r\n            className='waves-effect waves-light btn'\r\n            onClick={getNumberOfPosts}\r\n          >\r\n            Set\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className='row'>\r\n        {posts.map(post => (\r\n          <div className='col s12 m6' key={post.id}>\r\n            <div className='card'>\r\n              <div className='card-content'>\r\n                <div className='card-title'>{post.title}</div>\r\n                <p className='timestamp'>{post.createdAt}</p>\r\n                <p>{post.body}</p>\r\n              </div>\r\n              <div className='card-action'>\r\n                <a href='#' onClick={editPost.bind(null, post)}>\r\n                  Edit\r\n                </a>\r\n                <a\r\n                  href='#'\r\n                  onClick={deletePost.bind(null, post.id)}\r\n                  className='delete-btn'\r\n                >\r\n                  Delete\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\n\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\nimport '../node_modules/materialize-css/dist/js/materialize.min.js';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport About from './pages/about';\nimport Home from './pages/home';\n\naxios.defaults.baseURL =\n  'https://ndb99xkpdk.execute-api.eu-west-2.amazonaws.com/dev';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className='container'>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/about' component={About} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}